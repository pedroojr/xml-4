name: Deploy Frontend

# Workflow para fazer deploy do frontend na Hostinger
on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name == 'main' && 'production' || github.ref_name }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Debug Info
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Frontend directory contents:"
          ls -la frontend/
          echo "Package.json contents:"
          cat frontend/package.json

      - name: Install dependencies
        working-directory: frontend
        run: |
          echo "Installing dependencies..."
          npm ci --legacy-peer-deps
          echo "Dependencies installed successfully"
          echo "Node modules size: $(du -sh node_modules)"

      - name: Build application
        working-directory: frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://xml.lojasrealce.shop/api' }}
          NODE_ENV: production
        run: |
          echo "Building application..."
          echo "VITE_API_URL: $VITE_API_URL"
          echo "NODE_ENV: $NODE_ENV"
          npm run build
          echo "Build completed successfully"
          echo "Dist directory contents:"
          ls -la dist/
          echo "Dist directory size: $(du -sh dist)"

      - name: Validate build output
        working-directory: frontend
        run: |
          echo "Validating build output..."
          if [ ! -f "dist/index.html" ]; then
            echo "ERROR: index.html not found in dist directory"
            exit 1
          fi
          if [ ! -d "dist/assets" ]; then
            echo "ERROR: assets directory not found in dist directory"
            exit 1
          fi
          echo "Build validation passed"

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_SSH_KEY }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: ${{ secrets.SFTP_PORT || '22' }}
          script: |
            set -e
            echo "Preparing remote directory..."
            TARGET_DIR="/home/${{ secrets.SFTP_USERNAME }}/domains/${{ secrets.FRONT_DOMAIN }}/public_html"
            echo "Target directory: $TARGET_DIR"
            
            # Create directory if it doesn't exist
            mkdir -p "$TARGET_DIR"
            echo "Directory created/verified"
            
            # Backup existing files
            if [ -d "$TARGET_DIR" ] && [ "$(ls -A $TARGET_DIR)" ]; then
              BACKUP_DIR="$TARGET_DIR/backup_$(date +%Y%m%d_%H%M%S)"
              echo "Creating backup at: $BACKUP_DIR"
              cp -r "$TARGET_DIR" "$BACKUP_DIR"
              echo "Backup created successfully"
            fi
            
            # Clean directory
            echo "Cleaning target directory..."
            rm -rf "$TARGET_DIR"/*
            echo "Directory cleaned"
            
            # Show directory status
            echo "Target directory status:"
            ls -la "$TARGET_DIR"

      - name: Upload files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_SSH_KEY }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: ${{ secrets.SFTP_PORT || '22' }}
          source: "frontend/dist/*"
          target: "/home/${{ secrets.SFTP_USERNAME }}/domains/${{ secrets.FRONT_DOMAIN }}/public_html/"
          strip_components: 1

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          key: ${{ secrets.SFTP_SSH_KEY }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: ${{ secrets.SFTP_PORT || '22' }}
          script: |
            set -e
            echo "Verifying deployment..."
            TARGET_DIR="/home/${{ secrets.SFTP_USERNAME }}/domains/${{ secrets.FRONT_DOMAIN }}/public_html"
            
            echo "Files deployed:"
            ls -la "$TARGET_DIR"
            
            echo "Directory size:"
            du -sh "$TARGET_DIR"
            
            # Check if critical files exist
            if [ ! -f "$TARGET_DIR/index.html" ]; then
              echo "ERROR: index.html not found after deployment"
              exit 1
            fi
            
            if [ ! -d "$TARGET_DIR/assets" ]; then
              echo "ERROR: assets directory not found after deployment"
              exit 1
            fi
            
            echo "Deployment verification passed successfully!"

      - name: Health check
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          echo "Performing health check..."
          if curl -f -s "https://${{ secrets.FRONT_DOMAIN }}/" > /dev/null; then
            echo "✅ Health check passed - site is accessible"
          else
            echo "⚠️ Health check failed - site may not be accessible yet"
          fi

      - name: Deployment Summary
        run: |
          echo "🚀 Frontend deployment completed successfully!"
          echo "📍 Domain: ${{ secrets.FRONT_DOMAIN }}"
          echo "🔗 URL: https://${{ secrets.FRONT_DOMAIN }}/"
          echo "📅 Deployed at: $(date)"
          echo "📝 Commit: ${{ github.sha }}"
